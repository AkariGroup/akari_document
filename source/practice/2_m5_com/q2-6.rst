.. highlight:: python
   :linenothreshold: 10

******************************
Q2-6.自動ライト
******************************


問題
========

| **Q2-6.環境明るさの取得値をコマンドラインに表示し、3000以上の場合のみ、テストヘッドのdout0のLEDをONにする自動ライトを作りましょう。。**

ファイルの場所: akari_practice/2_m5_com/question/q2-6_auto_light.py

.. code-block:: python

   #!/usr/bin/env python
   # -*- coding: utf-8 -*-

   """
   Q2-6.環境明るさの取得値をコマンドラインに表示し、
      3000以上の場合のみ、テストヘッドのdout0のLEDをONにする自動ライトを作りましょう。
   ヒント1: Q2-3とQ2-5を参考にしましょう。
            get関数の返り値の'brightness'の項目から明るさが読めます。
   ヒント2: AKARIのボディー部の、AKARIから見て右側面に明るさセンサがついています。
            ここに光を当てたり、指で覆ったりするとbrightnessの値が0-4095で変化します。
            暗くなるほどbrightnessの値は大きくなります。
   ヒント3: 3000未満の時はLED0は消しましょう。
   """

   # M5と通信する際はm5serial_server_pyのライブラリをインポートする。
   from m5serial_server_py.m5serial_server_py import M5SerialServer
   # sleep関数を使うためにtimeのライブラリをインポートする。
   import time


   def main() -> None:
      """
      メイン関数
      """

      # M5SerialServerのインスタンスを作成する。
      m5 = M5SerialServer()

      ### ここから問題  ###
      # Ctrl + Cで終了するまでループし続ける
      while(True):
         m5_data = """(M5から値を取得する関数)"""
         # 取得した明るさをコマンドラインに表示。
         """(明るさ値をコマンドラインに表示する処理)"""
         # 3000以上ならdout0をONにする。
         """(明るさ3000以上ならdout0をON、3000未満ならOFFにする処理)"""
         # 0.5秒停止処理を入れる。
         time.sleep(0.5)
      ### ここまで  ###


   if __name__ == '__main__':
      main()



環境センサから取得した明るさを監視し、暗くなったら点灯する自動ライトを作ってみましょう。

ヒント
========

Q2-3、Q2-5を参考にしましょう。

Q2-5と同じようにget()関数を使ってM5のセンサ情報を取得します。

返り値のm5_dataの中で、今回参照するのは['brightness']のキーです。

明るさ値は0-4095で、 **暗くなるほど値が大きくなります。**

今回は取得した明るさ値が3000以上かどうかをif文で判定して3000以上ならdout0をON、3000未満ならOFFにします。

dout0のON、OFFの方法はQ2-3と同じです。

答え合わせ
================
完成したら実行してみましょう

.. code-block:: bash

   python q2-6_auto_light.py

0.5秒ごとにコマンドライン上に明るさ値が表示されるはずです。

AKARIのボディー部の、AKARIから見て右側面に光センサがついています。

これを手で覆ってみるなどして、コマンドラインに表示されている明るさ値が3000以上になった時にdout0のLEDが点灯、3000未満で消灯すればOKです。

|
:doc:`回答 <a2-6>` へ進む
