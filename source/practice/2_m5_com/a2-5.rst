.. highlight:: python
   :linenothreshold: 10

******************************
A2-5.温度計(回答編)
******************************

回答
========

| **Q2-5.環境温度を取得して1秒ごとにコマンドラインに表示しましょう。**


以下はコード例です。問題文を満たしていれば、これと同じでなくても問題ありません。

ファイルの場所: akari_practice/2_m5_com/answer/a2-5_temperature.py

.. code-block:: python

    #!/usr/bin/env python
    # -*- coding: utf-8 -*-

    """
    Q2-5.環境温度を取得して1秒ごとにコマンドラインに表示しましょう。
    ヒント1: Q2-1を参考に、get()関数を使ってM5の値を取得しましょう。
            返り値の'temperature'の項目から温度[℃]が読めます。
    """

    # M5と通信する際はm5serial_server_pyのライブラリをインポートする
    from m5serial_server_py.m5serial_server_py import M5SerialServer
    # sleep関数を使うためにtimeのライブラリをインポートする。
    import time

    def main(args=None):
        """
        メイン関数
        """

        # M5SerialServerのインスタンスを作成する。
        m5 = M5SerialServer()

        ### ここから問題  ###
        # Ctrl + Cで終了するまでループし続ける
        while(True):
            result, m5_data = m5.get()
            # データが取得できた場合(result=True)は温度表示。
            # 失敗した場合(result=False)はエラー文を表示。
            if(result):
                print("温度は" + str(m5_data['temperature']) + "度です。")
            else:
                print("データ取得に失敗しました")
            # 1秒停止処理を入れる。
            time.sleep(1)
        ### ここまで  ###


    if __name__ == '__main__':
        main()


解説
========
**26行目:**

.. code-block:: python

    result, m5_data = m5.get()

Q2-1と同じように21行目でm5という名前でm5_serial_serverのインスタンスを作成しているので、m5.get()という形で呼び出します。

|
**46行目:**

.. code-block:: python

    print("温度は" + str(m5_data['temperature']) + "度です。")

今回は、"m5_data['temperature']" を参照します。この値を文字列に変換した上で、前後に文字列を合成して、"温度は〇〇度です。"という表示にします。

|
**51行目:**

.. code-block:: python

    time.sleep(1)

1秒間停止させるように問題文で指示されているので、sleepを使って1秒停止します。


実行結果
========
answerディレクトリ内のファイルを実行してみましょう

.. code-block:: bash

    python a2-5_temperature.py

1秒ごとに"温度は〇〇度です。"とコマンドラインに表示されます。

|
:doc:`問題 <q2-5>` へ戻る

:doc:`q2-6` へ進む
