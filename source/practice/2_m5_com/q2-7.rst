.. highlight:: python
   :linenothreshold: 10

******************************
Q2-7.手動ライト
******************************


問題
========

| **Q2-7.ボタンAを押すとテストヘッドのpwmout0のLEDの明るさを10上げて、ボタンBを押すと10下げる手動ライトを作りましょう。**
| **pwmout0にセットする値は0-250の範囲内に収まるようにしてください。**

ファイルの場所: akari_practice/2_m5_com/question/q2-7_manual_light.py

.. code-block:: python

   #!/usr/bin/env python
   # -*- coding: utf-8 -*-

    """
    Q2-7.ボタンAを押すとテストヘッドのpwmout0のLEDの明るさを10上げて、
        ボタンBを押すと10下げる手動ライトを作りましょう。
        pwmout0にセットする値は0-250の範囲内に収まるようにしてください。
    ヒント1: ボタン操作はQ2-1、pwmoutはQ2-4を参考にしましょう。
    ヒント2: LEDの明るさ値の変数を初期値を0で作成して,
            ボタンが押されていたら明るさ値を変化→pwmout0にセットする、というループ処理を書きましょう。
    ヒント3: ループの最後に停止処理を入れないと処理が間に合いませんが、停止処理が長すぎると使い勝手が悪いです。
            停止時間を調整して、安定かつ使いやすいアプリを目指してみましょう。
    """

   ### ここから問題  ###

   """(コードを記述)”"""

   ### ここまで  ###


今度はボタンで操作する手動ライトを作ってみましょう。

コードを全部書くようになっていますが、これまでの内容を参考にすれば完成できるはずです。

ヒント
========

ボタン操作はQ2-1、pwmoutはq2-4を参考にしましょう。

Q2-1と同じ方法でボタンA,ボタンBの状態が取得できるはずです。

if文で、ボタンAが押されている場合の処理、ボタンBが押されている場合の処理を書いていきましょう。

pwmoutの出力値の変数を初期値0で最初に作っておいて、ボタンAが押されたら+10、ボタンBが押されたら-10、PWM出力をセットして少しsleep、というのが処理の流れです。

この処理をwhile文でループさせましょう。

PWM出力にはQ2-4と同じく、set_pwmout()を使います。

１ループの最後にsleepを入れないと処理が間に合いませんが、sleep時間が長すぎると動きが遅くなってしまいます。

sleep時間を色々変えながら、使いやすい値を決定していきましょう。

答え合わせ
================
完成したら実行してみましょう

.. code-block:: bash

   python q2-7_maunual_light.py

ボタンAとボタンBで、テストヘッドのpwmout0のLEDの明るさが変更できればOKです。

|
:doc:`回答 <a2-7>` へ進む
