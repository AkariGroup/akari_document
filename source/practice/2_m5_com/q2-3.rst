.. highlight:: python
   :linenothreshold: 10

******************************
Q2-3.デジタル出力の制御
******************************


問題
========

**Q2-3.テストヘッドのdout0のLEDを2秒ごとにONOFFするコードを書きましょう。**

ファイルの場所: akari_practice/2_m5_com/question/q2-3_dout.py

.. code-block:: python

   #!/usr/bin/env python
   # -*- coding: utf-8 -*-

   """
   Q2-3.テストヘッドのdout0のLEDを2秒ごとにONOFFするコードを書きましょう。
   ヒント1: set_dout (int pin_id, bool val)という関数でdoutの出力を制御できます。
            pin_idは0、valにTrue,Falseを入れることでON,OFFできます。
   ヒント2: while(True):の中に書かれたコードはループします。この中に１周期分の処理を書きましょう。
   ヒント3: 処理を停止するにはtime.sleep(sec)関数を使います。secに秒数を入れるとその時間だけ処理が停止します。
   """

   # M5と通信する際はm5serial_server_pyのライブラリをインポートする。
   from m5serial_server_py.m5serial_server_py import M5SerialServer
   # sleep関数を使うためにtimeのライブラリをインポートする。
   import time


   def main() -> None:
      """
      メイン関数
      """

      # M5SerialServerのインスタンスを作成する。
      m5 = M5SerialServer()

      ### ここから問題  ###
      while(True):
         """ (処理を書く)"""
      ### ここまで  ###


   if __name__ == '__main__':
      main()



テストヘッドのGPIO出力を制御する方法を学習していきましょう。
まずはデジタル出力です。

ヒント
========

**今回使用するAKARIライブラリ1: set_dout()**

M5のデジタル出力を制御するには、M5SerialServerのset_dout()関数を使います。

   .. function:: bool **set_dout** (int pin_id, bool val)
   | ヘッドGPIOのdout出力を変更。
   | - **引数**
   |  `int pin_id`: 0でdout0、1でdout1。
   |  `bool val`: falseで0V,trueで3.3V出力。
   | - **返り値**
   |  `bool result`: M5へのserial送信完了でtrue。

この関数を使うと、任意のピンのデジタル出力を変更できます。

今回は第一引数のpin_idが0、第二引数のvalをTrue、Falseで切り替えて出力をON、OFFします。

この関数はm5serial_server_pyのライブラリに含まれており、24行目でm5いう名前でこのライブラリのインスタンスを作成しています。

これまでの問題と同じように、m5.set_dout()のようにこの関数を呼び出します。

今回は２秒毎にON、OFFし続けるので、while文を使ってループを書きましょう。

dout0をON→2秒sleep→dout0をOFF→2秒sleepが1ループです。


答え合わせ
================
完成したら実行してみましょう

.. code-block:: bash

   python q2-3_dout.py

テストヘッドのdout0のLEDが2秒ごとにONOFFしたらOKです。

|
:doc:`回答 <a2-3>` へ進む
