.. highlight:: python
   :linenothreshold: 10

******************************
A2-7.手動ライト(回答編)
******************************

回答
========

| **Q2-7.ボタンAを押すとテストヘッドのpwmout0のLEDの明るさを10上げて、ボタンBを押すと10下げる手動ライトを作りましょう。**
| **pwmout0にセットする値は0-250の範囲内に収まるようにしてください。**

以下はコード例です。問題文を満たしていれば、これと同じでなくても問題ありません。

ファイルの場所: akari_practice/2_m5_com/answer/a2-7_manual_light.py

.. code-block:: python

    #!/usr/bin/env python
    # -*- coding: utf-8 -*-

    """
    Q2-7.ボタンAを押すとテストヘッドのpwmout0のLEDの明るさを10上げて、
        ボタンBを押すと10下げる手動ライトを作りましょう。
        pwmout0にセットする値は0-250の範囲内に収まるようにしてください。
    ヒント1: ボタン操作はQ2-1、pwmoutはQ2-4を参考にしましょう。
    ヒント2: LEDの明るさ値の変数を初期値を0で作成して,
            ボタンが押されていたら明るさ値を変化→pwmout0にセットする、というループ処理を書きましょう。
    ヒント3: ループの最後に停止処理を入れないと処理が間に合いませんが、停止処理が長すぎると使い勝手が悪いです。
            停止時間を調整して、安定かつ使いやすいアプリを目指してみましょう。
    """

    ### ここから問題  ###

    # M5と通信する際はm5serial_server_pyのライブラリをインポートする。
    from m5serial_server_py.m5serial_server_py import M5SerialServer
    # sleep関数を使うためにtimeのライブラリをインポートする。
    import time


    def main(args=None):
        """
        メイン関数
        """

        # M5SerialServerのインスタンスを作成する。
        m5 = M5SerialServer()

        # pwmout0の明るさの変数を初期値0で作成。
        pwmout0_val = 0
        # Ctrl + Cで終了するまでループし続ける。
        while(True):
            result, m5_data = m5.get()
            # データが取得できた場合(result=True)は明るさ表示。
            # 失敗した場合(result=False)はエラー文を表示。
            if(result):
                 # ボタンAが押されていて、かつpwmout0_valが240以下の場合、pwmout0を+10。
                if(m5_data['button_a'] and pwmout0_val <= 240):
                    pwmout0_val += 10
                # ボタンBが押されていて、かつpwmout0_valが10以上の場合、pwmout0を-10。
                if(m5_data['button_b'] and pwmout0_val >= 10):
                    pwmout0_val -= 10
                # pwmout0の値をコマンドラインに出力。
                print("今の明るさは" + str(pwmout0_val) + "です。")
            else:
                print("データ取得に失敗しました")
            # pwmout0を指令
            m5.set_pwmout(0, pwmout0_val)
            # 0.1秒停止処理を入れる。ここは各自調整！
            time.sleep(0.1)


    if __name__ == '__main__':
        main()

    ### ここまで  ###


解説
========
**17-20行目:**

.. code-block:: python

    # M5と通信する際はm5serial_server_pyのライブラリをインポートする。
    from m5serial_server_py.m5serial_server_py import M5SerialServer
    # sleep関数を使うためにtimeのライブラリをインポートする。
    import time

最初に必要なモジュールをインポートします。

1つ目はM5と通信するためのM5SerialServer

2つ目はsleepを使うために必要なtimeです。

|
**23行目:**

.. code-block:: python

    def main(args=None):

メイン関数を定義します。この中身が実行されます。

|
**28-29行目:**

.. code-block:: python

    # M5SerialServerのインスタンスを作成する。
    m5 = M5SerialServer()

M5SerialServer()のインスタンスをm5という名前で作成します。

|
**31-32行目:**

.. code-block:: python

    # pwmout0の明るさの変数を初期値0で作成。
    pwmout0_val = 0

pwm出力値として使う変数をここで作成しておきます。

While文の中に書いてしまうと、毎回ループのために0が与えられてしまうので、while文の前に書きます。

|
**34行目:**

.. code-block:: python

    while(True):

3秒に１回動作するコードなので、while()でループさせます。

条件式はTrueなので、終了するまでループし続けます。

|
**35行目:**

.. code-block:: python

        result, m5_data = m5.get()

これまでと同じようにm5という名前でm5_serial_serverのインスタンスを作成しているので、m5.get()という形で呼び出します。

|
**37行目:**

.. code-block:: python

    if(result):

resultがTrueの場合のみm5_dataの値を読むようにします。こうしないとエラーが発生します。

|
**38-40行目:**

.. code-block:: python

    # ボタンAが押されていて、かつpwmout0_valが240以下の場合、pwmout0を+10。
    if(m5_data['button_a'] and pwmout0_val <= 240):
        pwmout0_val += 10

ボタンAの出力はm5_data['button_a']に格納されています。ボタンAがTrueで、かつpwmout0_valが240以下の時のみ、31行目で作成した変数であるpwmout0_valを+10します。

こうすることで、pwmout0_valが250を超えないようにします。

|
**42-44行目:**

.. code-block:: python

    # ボタンBが押されていて、かつpwmout0_valが10以上の場合、pwmout0を-10。
    if(m5_data['button_b']):
        pwmout0_val -= 10

ボタンBの出力はm5_data['button_b']に格納されています。同様にボタンBがTrueかつpwmout0_valが10以上の時のみ、pwmout0_valを-10します。

こうすることで、pwmout0_valが0を下回らないようにします。

|
**45-46行目:**

.. code-block:: python

    # pwmout0の値をコマンドラインに出力。
    print("今の明るさは" + str(pwmout0_val) + "です。")

pwmout0_valをコマンドラインに出力しておきます。

|
**47-48行目:**

.. code-block:: python

    else:
        print("データ取得に失敗しました")

36行目のif文に対するelseです。resultがFalseだった場合、つまりデータ取得に失敗した場合、コマンドラインにエラーメッセージとして出力します。

|
**49-50行目:**

.. code-block:: python

    # pwmout0を指令
    m5.set_pwmout(0, pwmout0_val)

ボタンによって更新されたpwmout0_valを出力値として、set_pwmout()でpwmout0を出力します。

|
**51-52行目:**

.. code-block:: python

    # 0.1秒停止処理を入れる。ここは各自調整！
    time.sleep(0.1)

0.1秒間停止させる処理をします。ここの値は各自調整し、ループ速度と処理のレスポンスが最適になるようにしましょう。

|
**55-56行目:**

.. code-block:: python

    if __name__ == '__main__':
        main()

この文法を入れておくと、ファイルがコマンドラインからスクリプトとして実行された場合にのみ処理を実行してくれます。


実行結果
========
answerディレクトリ内のファイルを実行してみましょう

.. code-block:: bash

    python a2-7_manual_light.py

ボタンAとボタンBで、テストヘッドのpwmout0のLEDの明るさが変更されます。

|
:doc:`問題 <q2-7>` へ戻る

:doc:`../3_m5_display/main` へ進む
