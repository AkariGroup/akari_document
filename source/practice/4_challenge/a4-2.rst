.. highlight:: python
   :linenothreshold: 10

******************************
A4-2.シャッターカメラ(回答編)
******************************

回答
========

**Q4-2.キーボードで特定のキーを入力した際に写真を撮影して保存するアプリを作りましょう。**

以下はコード例です。問題文を満たしていれば、これと同じでなくても問題ありません。

ファイルの場所: akari_practice/4_challenge/answer/a4-2_cum_shutter.py

.. code-block:: python

    #!/usr/bin/env python
    # -*- coding: utf-8 -*-

    """
    Q4-2.キーボードで特定のキーを入力した際に写真を撮影して保存するアプリを作りましょう。
    ヒント1: take_photo()という関数が用意してあるのでこれを使いましょう。
            この関数はファイル名を引数として渡すと、その名前の写真を保存してくれます。
            1枚目は001,2枚目は002...となるようにファイル名を渡してあげましょう。
    ヒント2: キーボード入力を取得するにはinput()という関数を使います。
                val = input()
            というようにすると、入力した文字がvalとして得られます。
            文字入力後エンターを押すとvalに渡されます。
    ヒント3: zfill()を使うと文字列をゼロ埋めします。
            zfillの引数はゼロ埋めする桁数です。下記のように使います。
                num = 1
                num_after = str(num).zfill(3)
                print(num_after)
                # '001'とプリントされる
    """

    # M5と通信する際はm5serial_server_pyのライブラリをインポートする
    from m5serial_server_py.m5serial_server_py import M5SerialServer
    # openCVのライブラリをインポート
    import cv2
    # osのインポート
    import os

    # webカメラの設定
    DEVICE_ID = 0


    def take_photo(name: str):
        """
        写真を撮って保存する関数。
        保存先はoutputディレクトリ以下。
        Args:
            name (str): 保存する画像ファイル名
        Returns:
            Bool: True なら成功, False なら失敗.

        """
        # カメラ画像の取得
        cap = cv2.VideoCapture(DEVICE_ID)
        ret, frame = cap.read()
        cap.release()
        # 取得に失敗した場合、Falseを返す
        if not ret:
            print('画像取得に失敗しました。')
            return False
        else:
            file_name = 'output/' + name + '.jpg'
            cv2.imwrite(file_name, frame)
            print('ファイル名' + file_name + 'を保存しました。')
            return True


    def main(args=None):
        """
        メイン関数
        """
        # 'output'というディレクトリを作成
        os.makedirs('output', exist_ok=True)
        ### ここから問題  ###
        # ファイル名の通し番号
        num = 0
        # Ctrl + Cで終了するまでループし続ける
        while(True):
            print('cを入力後エンターを押すと写真を撮影します。')
            # キーボード入力待ち
            val = input()
            # cが入力されていた場合写真を撮る。
            if(val == 'c'):
                # numを3桁に0埋めしてtake_photo()に渡す。
                take_photo(str(num).zfill(3))
                # 写真を撮ったらnumを+1する。
                num += 1
        ### ここまで  ###


    if __name__ == '__main__':
        main()



解説
========
**64-65行目:**

.. code-block:: python

    # ファイル名の通し番号
    num = 0

ファイル名の通し番号として使う変数を最初に作っておきます。

|
**66-67行目:**

.. code-block:: python

    # Ctrl + Cで終了するまでループし続ける
    while(True):

while()でループさせます。条件式はTrueなので、終了するまでループし続けます。

|
**68行目:**

.. code-block:: python

    print('cを入力後エンターを押すと写真を撮影します。')

操作説明文をコマンドラインに出力します。今回は'c'が入力されたら写真を撮る、としました。

|
**69-70行目:**

.. code-block:: python

    # キーボード入力待ち
    val = input()

input()関数を使ってキーボードの入力待ちをします。

|
**71-72行目:**

.. code-block:: python

    # cが入力されていた場合写真を撮る。
    if(val == 'c'):

キーボードで入力された値が'c'かどうかを判定します。

今回はelse文を書いていません。c以外だった場合は、ループの始めに戻って再びキーボード入力待ちとなります。

|
**73-74行目:**

.. code-block:: python

    # numを3桁に0埋めしてtake_photo()に渡す。
    take_photo(str(num).zfill(3))

take_photo()関数で写真を撮影します。引数は、numを文字列に変換して3桁でゼロ埋めした文字列です。

|
**75-76行目:**

.. code-block:: python

    # 写真を撮ったらnumを+1する。
    num += 1

numを一つ進めておきます。こうすることで、次の撮影時は1つ先の番号で名前付けがされます。


実行結果
========
answerディレクトリ内のファイルを実行してみましょう

.. code-block:: bash

    python a4-2_camera_shutter.py

キーボードで'c'を入力してenterキーを押すと、AKARIが撮影した画像がoutputディレクトリに保存されます。

|
:doc:`問題 <q4-2>` へ戻る

:doc:`../main` へ戻る
