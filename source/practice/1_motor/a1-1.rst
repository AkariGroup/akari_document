.. highlight:: python
    :linenothreshold: 10

************************************************************
A1-1.関節名の取得(回答編)
************************************************************

回答
========

**Q1-1.ヘッドの２軸の関節名を取得して、コマンドラインに表示してみましょう。**

以下はコード例です。問題文を満たしていれば、これと同じでなくても問題ありません。

ファイルの場所: akari_practice/1_motor/answer/a1-1_joints_name.py

.. code-block:: python

    #!/usr/bin/env python
    # -*- coding: utf-8 -*-

    """
    Q1-1.ヘッドの２軸の関節名を取得して、コマンドラインに表示してみましょう。

    ヒント: get_joint_names (void)という関数を使うと、list型で名前が返ってきます。
            このlistをprintしてみましょう。
    """

    # モータ制御の際はakari_controllerのライブラリをインポートする
    from akari_controller.akari_controller import AkariController

    def main() -> None:
        """
        メイン関数
        """

        # AkariControllerのインスタンスを作成する。
        akari = AkariController()

        ### ここから問題  ###
        joints_name = akari.get_joint_names()
        print(joints_name)
        ### ここまで  ###


    if __name__ == '__main__':
        main()


解説
========

**23行目:**

.. code-block:: python

        joints_name = akari.get_joint_names()

ヒントにもあったように、20行目でakariという名前でakari_controllerのライブラリを定義しています。

この場合、akari_controllerに含まれる関数は **akari.関数名** という形で呼び出します。

|
**24行目:**

.. code-block:: python

        print(joints_name)

コマンドラインに出力するには、print()という関数を使います。

23行目でjoints_nameという変数に関節名を受け取ったので、これをprint関数で出力します。print(変数名)で出力できます。

joints_nameはlist型なので、listが出力されます。


実行結果
========
answerディレクトリ内のファイルを実行してみましょう

.. code-block:: bash

    python a1-1_joints_name.py

下記のようにコマンドラインに出力されるはずです。

::

    ['pan', 'tilt']

左右方向の関節名が'pan', 上下方向の関節名が'tilt'だということが分かります。


Tips
========

全行解説
^^^^^^^^

初回なのでpythonのコードの書き方の解説を兼ねて、全行解説します。

やや難しい部分もあるかと思いますが、現時点では気にせず読み飛ばしても大丈夫です。

|
**1行目:**

.. code-block:: python

    #!/usr/bin/env python

これはShebang(シバン)というもので、Linux環境でスクリプトの1行目に記述する、特殊な文字列のことです。

/usr/bin/env pythonとなっているのは、システム内でPATHが通っている環境のpythonを使うということになります。

難しいですが、 **現時点では特に気にせず毎回最初の行に入れておきましょう。**

|
**2行目:**

.. code-block:: python

    # -*- coding: utf-8 -*-

同様にShebangで、日本語のエンコードを選択しておきます。ここではUTF-8を選択しています。

現状互換性が一番高いと思います。 **これも毎回入れておきましょう。**

|
**4-9行目:**

.. code-block:: python

    """
    Q1-1.ヘッドの２軸の関節名を取得して、コンソールに表示してみましょう。

    ヒント: get_joint_names (void)という関数を使うと、list型で名前が返ってきます。
            このlistをprintしてみましょう。
    """

**"""で囲った部分はコメントとなり、実行時は無視されます。**

|
**11-12行目:**

.. code-block:: python

    # モータ制御の際はakari_controllerのライブラリをインポートする
    from akari_controller.akari_controller import AkariController

11行目の#で始まる行はコメントとなり、実行時に無視されます。

12行目はfrom <module> import <method>という書き方で、別のファイル(モジュール)に記述されたPythonコードを取り込むために使います。

akari_controllerはモータ制御用のライブラリとしてあらかじめインストールされています。

この中のAkariControllerをインポートしています。

最初のうちは、 **ヘッドのモータ制御が必要な際は必ず記述するもの** 、と覚えておいてください。

|
**14-17行目:**

.. code-block:: python

    def main(args=None):
        """
        メイン関数
        """

defでは関数を定義します。mainという名前で定義されているのはメイン関数で、スクリプトを呼び出した時に実行される処理はここに書きます。

argsは引数で、args=Noneとしておくとpython実行時に引数が入っていても参照しません。

**最初はこの部分もあまり気にせず、毎回この書き方をしておけば問題ないです。**

|
**19-20行目:**

.. code-block:: python

    # AkariControllerのインスタンスを作成する。
    akari = AkariController()

モータ制御用のライブラリであるAkariControllerを使用するには、最初にこのインスタンスの作成が必須となります。

ここではそのインスタンスにakariという名前を付けています。

これも12行目とセットで **ヘッドのモータ制御をするために必要なもの** 、と覚えておいてください。

|
**22-25行目:**

.. code-block:: python

    ### ここから問題  ###
    joints_name = akari.get_joint_names()
    print(joints_name)
    ### ここまで  ###

上で解説しているので割愛します。

|
**28-29行目:**

.. code-block:: python

    if __name__ == '__main__':
        main()

28行目を入れておくと、ファイルがコマンドラインからスクリプトとして実行された場合にのみ処理を実行してくれます。

つまり他ファイルからimportしたときにこのコードの中身が自動実行されなくなります。

29行目にmain()という名前で実行する関数が指定されているので、14行目のmain()関数が実行されます。

**これも現時点ではあまり気にせず、基本的にアプリを作る場合は入れておきましょう。**

|
:doc:`問題 <q1-1>` へ戻る

:doc:`q1-2` へ進む
