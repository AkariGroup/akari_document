.. highlight:: python
    :linenothreshold: 10

******************************
Q3-5.デジタル時計
******************************


問題
========

**Q3-5.M5のディスプレイに時:分:秒を表示する時計を作りましょう。**

ファイルの場所: akari_practice/3_m5_display/question/q3-5_clock.py

.. code-block:: python

    #!/usr/bin/env python
    # -*- coding: utf-8 -*-

    """
    Q3-5. M5のディスプレイに時:分:秒を表示する時計を作りましょう。
    ヒント1: 現在時刻を返す独自関数 get_time() を作成してあります。これを使ってみましょう。
            返り値として時:分:秒の文字列が得られます。
    ヒント2: Q3-4を参考に書いてみましょう。
            背景の色、文字の色やサイズ、ループのあとの停止時間をどれくらいにするか、などで見栄えの良さが
            変わります。少し難しいですが、よりかっこいいアプリを目指して色々試してみましょう。
    """

    # M5と通信する際はm5serial_server_pyのライブラリをインポートする
    from m5serial_server_py.m5serial_server_py import M5SerialServer
    # sleep関数を使うためにtimeのライブラリをインポートする。
    import time
    # 時刻取得に必要なライブラリをインポートする。
    import datetime
    import locale
    # M5SerialServerのインスタンスを作成する。
    m5 = M5SerialServer()

    def get_time():
        """
        現在時刻を返す独自関数
        引数:なし
        返り値: 時:分:秒の文字列
        """
        # 現在時刻を取得。
        # locale.setlocale(locale.LC_TIME, 'ja_JP.UTF-8')
        dt_now = datetime.datetime.now()
        # 時:分:秒を返す。
        return (dt_now.strftime('%H:%M:%S'))

    ### ここから問題  ###

    """(コードを記述)"""

    ### ここまで  ###

今回は、デジタル時計をM5のディスプレイに表示してみましょう。


ヒント
========

Q3-4と同様、 関数が実装されています。main()関数を作成して、その中の処理を書いていきましょう。

まずはQ3-4を参考にすれば、1秒ごとに値を更新して表示する方法は分かるはずです。

今回は時刻の文字列を返すget_time()という関数があらかじめ実装されているので、これをQ3-4のget_pressure()の代わりに使っていきます。

時計の表示する文字の指定はありません。背景の色や文字の色、サイズや表示位置など色々試しながら、見栄えを調整してみましょう。

また、set_display_text()をした後にはsleepを入れてください。sleepの秒数も色々試して、最も機能的な時間を探してみてください。


答え合わせ
================

完成したら実行してみましょう

.. code-block:: bash

   python q3-5_clock.py

画面に時:分:秒のデジタル時計が表示されていればOKです。

|
:doc:`回答 <a3-5>` へ進む
