.. highlight:: python
    :linenothreshold: 10

******************************
A3-3.ディスプレイテキストの表示2(回答編)
******************************

回答
========

**Q3-3.M5のディスプレイに'あか''きいろ''あお'と縦に3つ並べて表示してみましょう。**
    **文字の色はそれぞれの字と同じ色('あか'なら赤)にしましょう。**

以下はコード例です。問題文を満たしていれば、これと同じでなくても問題ありません。

ファイルの場所: App/Other/akari_practice/3_m5_display/answer/a3-3_display_text_2.py

.. code-block:: python

    #!/usr/bin/env python
    # -*- coding: utf-8 -*-

    """
    Q3-3.M5のディスプレイに'あか''きいろ''あお'と縦に3つ並べて表示してみましょう。
        文字の色はそれぞれの字と同じ色('あか'なら赤)にしましょう。
    ヒント1: 前の文字を消さずに次の文字を表示する必要があります。
            set_display_textの引数refreshをFalseにすると、前の表示を消さずに重ねて表示します。
    ヒント2: 文字と背景の色は、画面の色変更と同じように黒なら'black'、白なら'white'を入れればOKです。
    """

    # M5と通信する際はm5serial_server_pyのライブラリをインポートする。
    from m5serial_server_py.m5serial_server_py import M5SerialServer
    # sleep関数を使うためにtimeのライブラリをインポートする。
    import time


    def main() -> None:
        """
        メイン関数
        """

        # M5SerialServerのインスタンスを作成する。
        m5 = M5SerialServer()

        ### ここから問題  ###
        # 'あか'を表示
        # textは'あか'
        text = 'あか'
        # 左右表示位置は真中揃え
        pos_x = -999
        # 上下表示位置は30
        pos_y = 30
        # 文字サイズは3
        size = 3
        # 文字色は赤
        text_color = 'red'
        # 背景色は白
        back_color = 'white'
        # 最初の１つ目は背景をリセットする
        refresh = True
        # set_display_textを実行
        result = m5.set_display_text(
            text, pos_x, pos_y, size, text_color, back_color, refresh)
        # 0.5秒停止
        time.sleep(0.5)

        # 'きいろ'を表示
        # textは'きいろ'
        text = 'きいろ'
        # 左右表示位置は真中揃え
        pos_x = -999
        # 上下表示位置は90
        pos_y = 90
        # 文字サイズは3
        size = 3
        # 文字色は黄色
        text_color = 'yellow'
        # 背景色は白
        back_color = 'white'
        # 前の文字を消さないために、背景はリセットしない。
        refresh = False
        # set_display_textを実行
        result = m5.set_display_text(
            text, pos_x, pos_y, size, text_color, back_color, refresh)
        # 0.5秒停止
        time.sleep(0.5)

        # 'あお'を表示
        # textは'あお'
        text = 'あお'
        # 左右表示位置は真中揃え
        pos_x = -999
        # 上下表示位置は150
        pos_y = 150
        # 文字サイズは3
        size = 3
        # 文字色は青
        text_color = 'blue'
        # 背景色は白
        back_color = 'white'
        # 前の文字を消さないために、背景はリセットしない。
        refresh = False
        # set_display_textを実行
        result = m5.set_display_text(
            text, pos_x, pos_y, size, text_color, back_color, refresh)
        # 0.5秒停止
        time.sleep(0.5)

        ### ここまで  ###


    if __name__ == '__main__':
        main()



解説
========
**29行目:**

.. code-block:: python

    text = 'あか'

textの引数には、str形式で出力したい文字列を与えます。今回は'あか'です。

|
**37行目:**

.. code-block:: python

    text_color = 'red'

文字の色は表示するテキストと同じ赤を指定します。

|
**41行目:**

.. code-block:: python

    refresh = True

最初の文字列を表示するため、一旦画面表示をリセットします。

refreshをTrueにすることで、画面をback_colorで指定した色(今回は白)でリセットした上で文字が表示されます。

|
**50行目:**

.. code-block:: python

    text = 'きいろ'

つぎは'きいろ'です。

|
**58行目:**

.. code-block:: python

    text_color = 'yellow'

同じく文字色は黄色にします。

|
**62行目:**

.. code-block:: python

    refresh = False

前の'あか'を消さずに表示したいため、refreshはFalseにします。

|
**71行目:**

.. code-block:: python

    text = 'あお'

最後は'あお'です。

|
**79行目:**

.. code-block:: python

    text_color = 'blue'

文字色は青にします。

|
**83行目:**

.. code-block:: python

    refresh = False

同じく、前の文字を残すため、refreshはFalseにします。


実行結果
========
answerディレクトリ内のファイルを実行してみましょう

.. code-block:: bash

    python a3-3_display_text_2.py

画面に「あか」「きいろ」「あお」という文字がそれぞれの色で表示されます。

|
:doc:`問題 <q3-3>` へ戻る

:doc:`q3-4` へ進む
